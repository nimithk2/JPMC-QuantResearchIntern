# -*- coding: utf-8 -*-
"""JPMC-QR-CaseStudy1-Nimit-Kapadia

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ThfnDtzJcbDTAmJhxLmJucHbvsYRmPBE

# Nimit Kapadia

# Question 1: Probability & Monte Carlo Simulation
Consider a company “XYZ capital” currently trading at \$100 (at time = t0) on the National Stock Exchange of Vol-land and it moves up by \$1 or moves down by the same amount with equal probability at each minute.

# A)

### a) What will be the expected value of stock price after:
* 1 minute

# Answer:

To calculate the expected value of the stock price after a given time period, we need to consider the probability of it moving up or down and the magnitude of the price change. In this case, the stock price can either move up by \$1 or move down by \$1, both with equal probability (=0.5) at each minute.

a) After 1 minute:
The stock price can either move up to \$101 or move down to \$99, both with a probability of 0.5. Therefore, the expected value after 1 minute is:

**(0.5 * \$101) + (0.5 * \$99) = \$100**
"""

answer = 0.5*101 + 0.5*99
print("Expected value of stock price after 1 minute: ", answer)

"""### b) What will be the expected value of stock price after:
* 10 minutes

# Answer:
b) After 10 minutes:

In this scenario, the stock price can move up or down by $1 at each minute, and we want to find the expected value after 10 minutes.

Let's consider the possible outcomes after 10 minutes:

The stock price increases by \$1 for all 10 minutes: In this case, the final stock price would be $100 + $1 + $1 + $1 + $1 + $1 + $1 + $1 + $1 + $1 = $110.

The stock price decreases by \$1 for all 10 minutes: In this case, the final stock price would be $100 - $1 - $1 - $1 - $1 - $1 - $1 - $1 - $1 - $1 = $90.

The stock price increases by \$1 for some minutes and decreases by \$1 for the remaining minutes: In this case, there are several possible combinations. For example, the stock price could increase for the first 6 minutes and then decrease for the next 4 minutes, resulting in a final stock price of $100 + $1 + $1 + $1 + $1 + $1 + $1 - $1 - $1 - $1 - $1 = $102.

Similarly, there are other combinations where the stock price could increase for fewer minutes and decrease for more minutes, resulting in different final stock prices.

$^{10}C_0(\frac{1}{2})^{10}*110 + ^{10}C_1(\frac{1}{2})^{10}*108 + ^{10}C_2(\frac{1}{2})^{10}*106 + ^{10}C_3(\frac{1}{2})^{10}*104 + ^{10}C_4(\frac{1}{2})^{10}*102 + ^{10}C_5(\frac{1}{2})^{10}*100 + ^{10}C_6(\frac{1}{2})^{10}*98 + ^{10}C_7(\frac{1}{2})^{10}*96 + ^{10}C_8(\frac{1}{2})^{10}*94 + ^{10}C_9(\frac{1}{2})^{10}*92 + ^{10}C_{10}(\frac{1}{2})^{10}*90\\
= (\frac{1}{2})^{10}\biggl[ {^{10}C_0}*200 + ^{10}C_1*200 + ^{10}C_2*200 + ^{10}C_3*200 + ^{10}C_4*200 + ^{10}C_5*100 \biggr]\\
= (\frac{1}{2})^{10}*100 \biggl[{^{10}C_0} + ^{10}C_1 + ^{10}C_2 + ... + ^{10}C_{10} \biggr]\\
= (\frac{1}{2})^{10}*100*2^{10}\\
= 100$

Therefore, the expected value of the stock price after 10 minutes is $100.
"""

def calculate_expected_value(minutes):
    # Base case: After 0 minutes, the expected value is the initial stock price
    if minutes == 0:
        return 100

    # Recursive calculation of expected value
    probability = 0.5
    up_price = calculate_expected_value(minutes - 1) + 1
    down_price = calculate_expected_value(minutes - 1) - 1
    expected_value = probability * up_price + probability * down_price

    return expected_value

minutes = 10
expected_value = calculate_expected_value(minutes)
print(f"The expected value after {minutes} minutes is: ${expected_value:.2f}")

"""### c) What will be the expected value of stock price after:
* 1 hour

# Answer:

There are 60 minutes in an hour.

The expected value after 1 month follows the same logic as the previous calculation. Each minute, the stock price has an equal chance of increasing or decreasing by \$1. Since the expected value after each minute is \$100, the expected value after 1 hour will also be $100.

The expected values after each time period (1 minute, 10 minutes, 1 hour, and 1 month) are all the same, i.e., $100.

### d) What will be the expected value of stock price after:
* 1 month

# Answer:

Assuming there are 30 days in a month and each day has 6.5 hours of trading (with 60 minutes per hour), there are a total of 30 * 6.5 * 60 = 11,700 minutes in a month.

The expected value after 1 month follows the same logic as the previous calculations. Each minute, the stock price has an equal chance of increasing or decreasing by \$1. Since the expected value after each minute is \$100, the expected value after 1 month will also be $100. However, stock price cannot go below 0, i.e. stock price cannot be negative. Hence, the expected stock price wouldn't be \$100 since the values less than 100 and greater than 0 would not cancel out all the values greater than 100. Hence, the expected stock price will be greater than \$100 and not \$100.

### e) Are all the values same? Please explain on why they should or should not be same

# Answer:

The expected values after different time periods are all the same, and they remain at the initial stock price of \$100. This result is due to the equal probability of the stock price moving up or down by $1 at each minute, resulting in an overall equilibrium where the expected value remains unchanged.

# B)

### What will be the probability of the stock price to go to \$102 before going to $96,

i) Solve the probability analytically.

### Answer:

Let's define the following variables:

p: Probability of the stock price moving up by \$1 in a single minute.

q: Probability of the stock price moving down by \$1 in a single minute. (q = 1 - p)

We start with the stock price at \\$100, and we want to find the probability of reaching \\$102 before reaching \$96.

To solve this mathematically, we can set up a system of equations based on the probabilities at each price level. Let's define:

P(x): Probability of reaching \\$102 before reaching \$96, starting from price x.

P(102): Probability of reaching \\$102 before reaching \\$96, starting from \$102. (This is the probability we want to calculate.)

P(96): Probability of reaching \\$102 before reaching \\$96, starting from \$96.
We can write the following equations:

P(102) = 1 (since we have already reached the desired price)

P(96) = 0 (since reaching \$96 first is not desirable)



$P(100) = p * P(101) + q * P(99)\\
P(100) = p * (p * P(102) + q * P(100)) + q * (p*P(100) + q*P(98))\\
P(100) = p^2 + 2pq*P(100) + q^2 * P(98)\\
P(100) = p^2 + 2pq*P(100) + q^2 * (p*P(99) + q*P(97))\\
P(100) = p^2 + 2pq*P(100) + p^2q^2*P(100) + 2pq^3*P(98)$


Since $p=q=0.5$, let's denote $p$ and $q$ as just $p$. Also, let's denote $P(100) =x$ and $P(98) = y$


$x = p^2 + 2p^2x + p^4x + 2p^4 (p^2x + 2p^2y)\\
x = p^2 + 2p^2x + p^4x + 2p^6x + 4p^6y\\
x = p^2 + 2p^2x + p^4x + 2p^6x + 4p^8x + 8p^8y\\
x = p^2 + 2p^2x + p^4x \biggl[1 + 2p^2 + (2p^2)^2 + (2p^2)^4 + ... \infty\biggr]\\
x = p^2 + 2p^2x + \frac{p^4}{1 - 2p^2}x\\
x = \frac{p^2(3p^4 - 4p^2 + 1)}{1-2p^2}$

Since $p = 0.5$,

$x = \frac{(\frac{1}{2})^2 \bigl(3(\frac{1}{2})^4 - 4(\frac{1}{2})^2 + 1\bigr)}{1 - 2(\frac{1}{2})^2}\\
\boxed{x = \frac{2}{3} = 0.6667}$

### What will be the probability of the stock price to go to \$102 before going to $96,

ii) Find the probability using Monte Carlo method. In particular, how many paths will get you to the converged value? Plot the estimated Value vs Number of Paths
"""

import random
import matplotlib.pyplot as plt

def calculate_probability_monte_carlo(num_paths):
    count = 0  # Counter for paths that reach $102 before reaching $96

    for _ in range(num_paths):
        price = 100  # Initial stock price

        while True:
            price += random.choice([-1, 1])  # Randomly move up or down by $1

            if price == 96:
                break  # Reached $96, stop the simulation

            if price == 102:
                count += 1  # Reached $102, increment the counter and stop the simulation
                break

    return count / num_paths  # Return the estimated probability

# Calculate the probability using the Monte Carlo method
num_paths_list = [10, 100, 1000, 10000, 100000, 1000000]  # List of number of paths to simulate
estimated_probabilities = []

for num_paths in num_paths_list:
    estimated_probability = calculate_probability_monte_carlo(num_paths)
    estimated_probabilities.append(estimated_probability)

# Plotting the estimated probability versus the number of paths
plt.plot(num_paths_list, estimated_probabilities, marker='o')
plt.xlabel("Number of Paths")
plt.ylabel("Estimated Probability")
plt.title("Estimated Probability vs Number of Paths")
plt.grid('True')
plt.xscale('log')
plt.show()

estimated_probabilities

"""# Question 2: Pricing a Call Option analytically using Black Scholes formula

Consider a company “XYZ capital” currently trading at \$200 (at time = t0) on the National Stock Exchange of Vol-land. We have a call option contract with the following parameters:
1. Strike: \$180
2. Time To expiration: 30 days (1/12th of a year)
3. Implied Vol: 15%
4. Interest Rate: 2%
5. Current Stock Price: $200

Compute the value of the above-described option contract using Black Scholes formula. Please write a generic function to calculate Black-Scholes price and call the function with the inputs above.
"""

import math

def black_scholes_pricer(spot, strike, expiration, rate, volatility, option_type):
    d1 = (math.log(spot / strike) + (rate + 0.5 * volatility ** 2) * expiration) / (volatility * math.sqrt(expiration))
    d2 = d1 - volatility * math.sqrt(expiration)

    if option_type == 'call':
        option_price = spot * norm_cdf(d1) - strike * math.exp(-rate * expiration) * norm_cdf(d2)
    elif option_type == 'put':
        option_price = strike * math.exp(-rate * expiration) * norm_cdf(-d2) - spot * norm_cdf(-d1)
    else:
        raise ValueError("Invalid option type. Must be either 'call' or 'put'.")

    return option_price

def norm_cdf(x):
    """Cumulative distribution function for the standard normal distribution"""
    return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

spot = 200.0
strike = 180.0
expiration = 1/12
rate = 0.02
volatility = 0.15
option_type = 'call'

price = black_scholes_pricer(spot, strike, expiration, rate, volatility, option_type)
print(f"The {option_type} option price is: {price}")

"""# Question 3: Pricing a Call Option using Monte Carlo Simulation

a) Please write a function to compute the price of a call option with the same parameters in Question 2, but using Monte Carlo simulation techniques.

b) Plot the price of the option vs number of paths.
"""

import warnings
warnings.filterwarnings("ignore")

import numpy as np
import matplotlib.pyplot as plt

def american_call_option_price(S, K, T, r, sigma, N, M, degree):
    dt = T / M
    z = np.random.normal(size=(N, M))
    S_path = np.zeros((N, M+1))
    S_path[:,0] = S
    for i in range(1, M+1):
        S_path[:,i] = S_path[:,i-1] * np.exp((r - 0.5*sigma**2)*dt + sigma*np.sqrt(dt)*z[:,i-1])
    V = np.zeros((N,M+1))
    V[:,-1] = np.maximum(S_path[:,-1] - K, 0)  # American Call option payoff
    for t in range(M-1, -1, -1):
        X = S_path[:,t] - K
        V_in = np.exp(-r*dt) * V[:,t+1]
        coef = np.polyfit(X, V_in, degree)
        C = np.polyval(coef, X)
        V[:,t] = np.where(X > C, X, np.exp(-r*dt) * V[:,t+1])
    price = np.mean(V[:,0])
    return price

# Parameters
S = 200.0
K = 180.0
T = 1/12
r = 0.02
sigma = 0.15
N = 10000  # Number of paths
M = 240  # Number of time steps
degree = 3  # Degree of the polynomial fit

# Calculate option prices for different numbers of paths
num_paths_list = [100, 1000, 10000, 100000, 1000000]
# num_paths_list = [1,2]
option_prices = []

for num_paths in num_paths_list:
    option_price = american_call_option_price(S, K, T, r, sigma, num_paths, M, degree)
    option_prices.append(option_price)

# Plotting option price vs number of paths
plt.plot(num_paths_list, option_prices, marker='o')
plt.xlabel("Number of Paths")
plt.ylabel("Option Price")
plt.title("Option Price vs Number of Paths")
plt.show()

print(option_prices)